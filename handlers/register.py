"""
–•—ç–Ω–¥–ª–µ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
"""
from logging import log, INFO

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import ReplyKeyboardRemove

from utils import utilities
from loader import dp, bot, db_users, db_log
import datetime

from utils.utilities import make_keyboard_list


async def validate(date_text):
    try:
        datetime.datetime.strptime(date_text, '%Y-%m-%d')
        return 1
    except ValueError:
        raise ValueError("Incorrect data format, should be YYYY-MM-DD")


class Register(StatesGroup):
    Name = State()
    NameSet = State()
    Age = State()
    Type = State()


@dp.message_handler(commands=['start'])
async def start_register(message: types.Message):
    user = await db_users.select_user(telegram_id=message.from_user.id)
    if user["custom_name"] is None:
        fullname = user["full_name"]
    else:
        fullname = user["custom_name"]
    log(INFO, f"USER [{message.from_user.id}] –Ω–∞–∂–∞–ª START.")
    me = await bot.get_me()
    buttons = [f"{message.from_user.full_name}", "–ó–∞–¥–∞—Ç—å –¥—Ä—É–≥–æ–µ –∏–º—è"]
    keyboard = utilities.make_keyboard_list(buttons)
    await message.reply(f"–ü—Ä–∏–≤–µ—Ç, {fullname}. üôãüèª‚Äç‚ôÇÔ∏è\n"
                        f"–Ø {me.full_name} - –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ ü§ñ, –±—É–¥—É –ø–æ–º–æ–≥–∞—Ç—å —Ç–µ–±–µ —Ä–µ—Ñ–ª–µ–∫—Å–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª, "
                        f"–¥–µ—Ä–∂–∞—Ç—å –≤ —Ñ–æ–∫—É—Å–µ —Ü–µ–ª—å –æ–±—É—á–µ–Ω–∏—è –∏ –µ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ.")
    await message.answer("–ö–∞–∫ —è –º–æ–≥—É –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è?", reply_markup=keyboard)
    await Register.Name.set()


@dp.message_handler(Text(equals="–ó–∞–¥–∞—Ç—å –¥—Ä—É–≥–æ–µ –∏–º—è"), state=Register.Name)
async def new_name(message: types.Message):
    await message.reply("–í–≤–µ–¥–∏ –∏–º—è –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è:",
                        reply_markup=ReplyKeyboardRemove())
    await Register.NameSet.set()


@dp.message_handler(state=Register.NameSet)
async def new_name(message: types.Message):
    newname = message.text
    user = await db_users.select_user(telegram_id=message.from_user.id)
    await db_log.add_log(1, user["id"], newname, user["custom_name"])
    await db_users.update_user_customname(newname, message.from_user.id)
    await message.reply(f"–¢–µ–ø–µ—Ä—å —è –±—É–¥—É –Ω–∞–∑—ã–≤–∞—Ç—å —Ç–µ–±—è {newname}!")
    log(INFO, f"[{message.from_user.id}] saved custom_name {newname}")
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è")
    await Register.Age.set()


@dp.message_handler(state=Register.Name)
async def new_name(message: types.Message):
    user = await db_users.select_user(telegram_id=message.from_user.id)
    fullname = message.from_user.full_name
    await message.reply(f"–•–æ—Ä–æ—à–æ, {fullname}", reply_markup=ReplyKeyboardRemove())
    log(INFO, f"[{message.from_user.id}] saved fullname {fullname}")
    await db_users.update_user_customname(None, message.from_user.id)
    await db_log.add_log(1, user["id"], None, user["custom_name"])
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è")
    await Register.Age.set()


@dp.message_handler(state=Register.Age)
async def set_age(message: types.Message, state: FSMContext):
    date = f"{message.text.split('.')[2]}-{message.text.split('.')[1]}-{message.text.split('.')[0]}"
    if await validate(date):
        await db_users.update_user_datebirth(datetime.datetime.strptime(date, '%Y-%m-%d'), message.from_user.id)
        log(INFO, f"[{message.from_user.id}] saved age {date}")
        buttons = []
        user_types = await db_users.select_all_types()
        for user_type in user_types:
            buttons.append(user_type["Description"])
        keyboard = make_keyboard_list(buttons)
        await message.reply(f"–ù–∞—á–∏–Ω–∞—è –∏–∑—É—á–∞—Ç—å —á—Ç–æ-—Ç–æ, –º—ã —Å—Ç–∞–Ω–æ–≤–∏–º—Å—è –Ω–∞ –ø—É—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏ –ø–µ—Ä–µ–º–µ–Ω. –ï—Å–ª–∏ –±—ã —Ç—ã –ø–∏—Å–∞–ª "
                            f"–∫–Ω–∏–≥—É –æ –ø–µ—Ä–µ–º–µ–Ω–∞—Ö, —Ç–æ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ª—É—á—à–µ –≤—Å–µ–≥–æ –ø–µ—Ä–µ–¥–∞—Ç—å –±—É–¥—É—â–∏–º —á–∏—Ç–∞—Ç–µ–ª—è–º –º–∞–∫—Å–∏–º—É–º "
                            f"–∑–Ω–∞–Ω–∏–π, —Ç–µ–±–µ –±—ã –ø–æ–Ω–∞–¥–æ–±–∏–ª–æ—Å—å:", reply_markup=keyboard)
        await Register.Type.set()
    else:
        return await message.reply(f"–í–≤–µ–¥–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")


@dp.message_handler(state=Register.Type)
async def set_type(message: types.Message, state: FSMContext):
    try:
        user_type = await db_users.select_type(description=message.text)
        await db_users.update_user_type_student(user_type['id'], message.from_user.id)
        await message.reply(f"–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ <b>/go</b> –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–≤–æ–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.",
                            reply_markup=ReplyKeyboardRemove())
        log(INFO, f"[{message.from_user.id}] saved type {user_type['name']}")
        await state.finish()
    except:
        return await message.answer("–í—ã–±–µ—Ä–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ:")
