"""
–•—ç–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /go, –¥–ª—è —Å–±–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—É—Ä—Å–µ
"""
from logging import log, INFO

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Regexp
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove

from filters import AuthCheck
from loader import dp, db_courses, db_level_exp
from utils.utilities import make_keyboard_list


class Course(StatesGroup):
    Name = State()
    Direction = State()
    LevelExp = State()
    LevelUser =State()


@dp.message_handler(AuthCheck(), commands=['go'])
async def start_course(message: types.Message):
    await message.reply("–ß—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ñ–æ–∫—É—Å –æ—Ç–≤–µ—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–æ–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤. üòá")
    await message.answer("–° —á–µ–º —Å–≤—è–∑–∞–Ω —Ç–≤–æ–π –∫—É—Ä—Å? (–ù–∞–ø—Ä–∏–º–µ—Ä: <code>Python</code> –∏–ª–∏ <code>Data Scientist</code>)")
    await Course.Name.set()


@dp.message_handler(commands=['go'])
async def start_course(message: types.Message):
    await message.reply("–ú–Ω–µ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á—à–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Ç–æ–±–æ–π, –Ω–∞–±–µ—Ä–∏ <b>/start</b> –∏ –æ—Ç–≤–µ—Ç—å –Ω–∞ –º–æ–∏ –≤–æ–ø—Ä–æ—Å—ã üòÉ")


@dp.message_handler(state=Course.Name)
async def purpose_name(message: types.Message, state: FSMContext):
    courses = await db_courses.find_course(f'%{message.text}%')
    if courses:
        inline_keyboard = InlineKeyboardMarkup()
        for course in courses:
            inline_button = InlineKeyboardButton(course["name"], callback_data=f"course_{course['id']}")
            inline_keyboard.add(inline_button)
        await message.answer("–£—Ç–æ—á–Ω–∏, –Ω–∞ –∫–∞–∫–æ–º –∫—É—Ä—Å–µ —Ç—ã –æ–±—É—á–∞–µ—à—Å—è:", reply_markup=inline_keyboard)
        await Course.Direction.set()
    else:
        await message.answer("–¢–∞–∫–∏—Ö –∫—É—Ä—Å–æ–≤ –Ω–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ <b>/go</b>")
        await state.finish()


@dp.callback_query_handler(Regexp('course_([0-9]*)'), state=Course.Direction)
async def course_callback(callback: types.CallbackQuery, state: FSMContext):
    course = await db_courses.select_courses(id=int(callback.data.split("_")[1]))
    async with state.proxy() as data:
        data["course_id"] = int(course["id"])
    buttons = []
    level_exps = await db_level_exp.select_levels()
    for level_exp in level_exps:
        buttons.append(level_exp["name"])
    keyboard = make_keyboard_list(buttons)
    await callback.message.answer(f"–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä. –ê —Ç—ã –∑–Ω–∞–µ—à—å, —á—Ç–æ –±–æ–ª–µ–µ 50% —Å–ª—É—à–∞—Ç–µ–ª–µ–π –≤—ã–±–∏—Ä–∞—é—Ç {course['name']} "
                                  f"–∏ –∫–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–æ –º–µ–Ω—è—é—Ç —Å–≤–æ—é –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å.\n"
                                  f"–ö–∞–∫ —Å —Ç–æ–±–æ–π —Å–≤—è–∑–∞–Ω–∞ –¥–∞–Ω–Ω–∞—è —Ç–µ–º–∞?", reply_markup=keyboard)
    await Course.LevelExp.set()


@dp.message_handler(state=Course.LevelExp)
async def level_exp_set(message: types.Message, state: FSMContext):
    try:
        level_exp = await db_level_exp.select_level(name=message.text)
        async with state.proxy() as data:
            data["level_exp_id"] = int(level_exp["id"])
        await message.reply("–û—Ü–µ–Ω–∏ –Ω–∞ —Å–∫–æ–ª—å–∫–æ —Ç—ã –≤–ª–∞–¥–µ–µ—à—å –¥–∞–Ω–Ω–æ–π —Ç–µ–º–æ–π? (–æ—Ç 1 –¥–æ 5, –≥–¥–µ 5 - –≤–ª–∞–¥–µ–Ω–∏–µ –≤ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–µ)",
                            reply_markup=ReplyKeyboardRemove())
        await Course.LevelUser.set()
    except:
        return await message.answer("–í—ã–±–µ—Ä–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ:")


@dp.message_handler(Regexp("^[1-5]"), state=Course.LevelUser)
async def level_user_set(message: types.Message, state: FSMContext):
    await message.answer(f"–¢—ã –≤–≤–µ–ª {message.text}. –ò —ç—Ç–æ –ø–æ–¥—Ö–æ–¥–∏—Ç")
    async with state.proxy() as data:
        data["level_user"] = int(message.text)


@dp.message_handler(state=Course.LevelUser)
async def level_user_set(message: types.Message, state: FSMContext):
    return await message.answer(f"–¢—ã –≤–≤–µ–ª {message.text} –∏ —ç—Ç–æ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç. –í–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5.")


# @dp.message_handler(state=Course.Duration)
# async def purpose_duration(message: types.Message):
#     await message.answer("–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –Ω–µ–¥–µ–ª—é —Ç—ã –≥–æ—Ç–æ–≤(–∞) —É–¥–µ–ª—è—Ç—å –≤ –Ω–µ–¥–µ–ª—é?")
#     await Course.Week.set()
#
#
#
#
#
# @dp.message_handler(state=Course.Hold)
# async def purpose_hold(message: types.Message):
#     await message.answer("–ù–∞—á–∏–Ω–∞—è –∏–∑—É—á–∞—Ç—å —á—Ç–æ-—Ç–æ, –º—ã —Å—Ç–∞–Ω–æ–≤–∏–º—Å—è –Ω–∞ –ø—É—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏ –ø–µ—Ä–µ–º–µ–Ω. –ï—Å–ª–∏ –±—ã —Ç—ã –ø–∏—Å–∞–ª –∫–Ω–∏–≥—É –æ "
#                          "–ø–µ—Ä–µ–º–µ–Ω–∞—Ö, —Ç–æ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ª—É—á—à–µ –≤—Å–µ–≥–æ –ø–µ—Ä–µ–¥–∞—Ç—å –±—É–¥—É—â–∏–º —á–∏—Ç–∞—Ç–µ–ª—è–º –º–∞–∫—Å–∏–º—É–º –∑–Ω–∞–Ω–∏–π, —Ç–µ–±–µ "
#                          "–±—ã –ø–æ–Ω–∞–¥–æ–±–∏–ª–æ—Å—å:")
#     await Course.Hold.set()
