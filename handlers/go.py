"""
–•—ç–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /go, –¥–ª—è —Å–±–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—É—Ä—Å–µ
"""
from datetime import datetime
from logging import log, INFO

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Regexp
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove

from filters import AuthCheck
from loader import dp, db
from utils.utilities import make_keyboard_list, validate


class Course(StatesGroup):
    Name = State()
    Direction = State()
    LevelExp = State()
    LevelUser =State()
    UserPlan = State()
    UserDayPlan = State()
    UserDateStart = State()


@dp.message_handler(AuthCheck(), commands=['go'])
async def start_course(message: types.Message):
    await message.reply("–ß—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ñ–æ–∫—É—Å –æ—Ç–≤–µ—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–æ–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤. üòá")
    await message.answer("–° —á–µ–º —Å–≤—è–∑–∞–Ω —Ç–≤–æ–π –∫—É—Ä—Å? (–ù–∞–ø—Ä–∏–º–µ—Ä: <code>Python</code> –∏–ª–∏ <code>Data Scientist</code>)")
    await Course.Name.set()


@dp.message_handler(commands=['go'])
async def start_course(message: types.Message):
    await message.reply("–ú–Ω–µ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á—à–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Ç–æ–±–æ–π, –Ω–∞–±–µ—Ä–∏ <b>/start</b> –∏ –æ—Ç–≤–µ—Ç—å –Ω–∞ –º–æ–∏ –≤–æ–ø—Ä–æ—Å—ã üòÉ")


@dp.message_handler(state=Course.Name)
async def purpose_name(message: types.Message, state: FSMContext):
    courses = await db.find_course(f'%{message.text}%')
    if courses:
        inline_keyboard = InlineKeyboardMarkup()
        for course in courses:
            inline_button = InlineKeyboardButton(course["name"], callback_data=f"course_{course['id']}")
            inline_keyboard.add(inline_button)
        await message.answer("–£—Ç–æ—á–Ω–∏, –Ω–∞ –∫–∞–∫–æ–º –∫—É—Ä—Å–µ —Ç—ã –æ–±—É—á–∞–µ—à—Å—è:", reply_markup=inline_keyboard)
        await Course.Direction.set()
    else:
        await message.answer("–¢–∞–∫–∏—Ö –∫—É—Ä—Å–æ–≤ –Ω–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ <b>/go</b>")
        await state.finish()


@dp.callback_query_handler(Regexp('course_([0-9]*)'), state=Course.Direction)
async def course_callback(callback: types.CallbackQuery, state: FSMContext):
    course = await db.select_courses(id=int(callback.data.split("_")[1]))
    async with state.proxy() as data:
        data["course_id"] = int(course["id"])
    buttons = []
    level_exps = await db.select_levels()
    for level_exp in level_exps:
        buttons.append(level_exp["name"])
    keyboard = make_keyboard_list(buttons)
    await callback.message.answer(f"–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä. –ê —Ç—ã –∑–Ω–∞–µ—à—å, —á—Ç–æ –±–æ–ª–µ–µ 50% —Å–ª—É—à–∞—Ç–µ–ª–µ–π –≤—ã–±–∏—Ä–∞—é—Ç {course['name']} "
                                  f"–∏ –∫–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–æ –º–µ–Ω—è—é—Ç —Å–≤–æ—é –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å.\n"
                                  f"–ö–∞–∫ —Å —Ç–æ–±–æ–π —Å–≤—è–∑–∞–Ω–∞ –¥–∞–Ω–Ω–∞—è —Ç–µ–º–∞?", reply_markup=keyboard)
    await Course.LevelExp.set()


@dp.message_handler(state=Course.LevelExp)
async def level_exp_set(message: types.Message, state: FSMContext):
    try:
        level_exp = await db.select_level(name=message.text)
        async with state.proxy() as data:
            data["level_exp_id"] = int(level_exp["id"])
        await message.reply("–û—Ü–µ–Ω–∏ –Ω–∞ —Å–∫–æ–ª—å–∫–æ —Ç—ã –≤–ª–∞–¥–µ–µ—à—å –¥–∞–Ω–Ω–æ–π —Ç–µ–º–æ–π? (–æ—Ç 1 –¥–æ 5, –≥–¥–µ 5 - –≤–ª–∞–¥–µ–Ω–∏–µ –≤ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–µ)",
                            reply_markup=ReplyKeyboardRemove())
        await Course.LevelUser.set()
    except:
        return await message.answer("–í—ã–±–µ—Ä–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ:")


@dp.message_handler(Regexp("^[1-5]"), state=Course.LevelUser)
async def level_user_set(message: types.Message, state: FSMContext):
    data = await state.get_data()
    themes = await db.select_theme_courses(course_id=data['course_id'])
    # log(INFO, themes)
    msg = "–ü–æ–∫–∞ –º—ã —Å —Ç–æ–±–æ–π –±–æ–ª—Ç–∞–ª–∏ —è –∑–∞–≥—Ä—É–∑–∏–ª –ø—Ä–æ–≥—Ä–∞–º–º—É –∏ –≥–æ—Ç–æ–≤ –µ–µ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥ —Ç–µ–±—è. –í–æ—Ç –æ–Ω–∞:\n"
    for theme in themes:
        msg += f" üî∏ <i>{theme['name']}</i> - {theme['duration']} —á–∞—Å–∞-–æ–≤\n"
    course_duration = await db.calculate_hours(course_id=data['course_id'])
    log(INFO, course_duration['sum'])
    # course_duration = 592
    msg += f" üîπ –í—Å–µ–≥–æ <b>{course_duration['sum']}</b> —á–∞—Å–æ–≤."
    async with state.proxy() as data:
        data["level_user"] = int(message.text)
        data["course_duration"] = course_duration['sum']
    await message.answer(msg)
    await message.answer("–†—É—Ç–∏–Ω–Ω—ã–µ –¥–µ–ª–∞ –Ω–∏–∫—Ç–æ –Ω–µ –æ—Ç–º–µ–Ω—è–ª –ø–æ—ç—Ç–æ–º—É, —Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ —Ç—ã –ø–ª–∞–Ω–∏—Ä—É–µ—à—å –∑–∞–Ω–∏–º–∞—Ç—å—Å—è –≤ –Ω–µ–¥–µ–ª—é?")
    await Course.UserPlan.set()


@dp.message_handler(state=Course.LevelUser)
async def level_user_set(message: types.Message, state: FSMContext):
    return await message.answer(f"–¢—ã –≤–≤–µ–ª {message.text} –∏ —ç—Ç–æ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç. –í–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5.")


@dp.message_handler(Regexp("([0-9]*)"), state=Course.UserPlan)
async def user_plan_set(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['user_hours_per_week'] = message.text
    await message.answer("–ê –≤ –¥–µ–Ω—å?")
    await Course.UserDayPlan.set()


@dp.message_handler(state=Course.UserPlan)
async def user_plan_set(message: types.Message, state: FSMContext):
    return await message.answer("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")


@dp.message_handler(Regexp("([0-9]*)"), state=Course.UserDayPlan)
async def user_day_plan_set(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['user_hours_per_day'] = message.text
    data = await state.get_data()
    calculated_hours_per_day = data['user_hours_per_week'] // 6
    if calculated_hours_per_day != data['user_hours_per_day']:
        return await message.reply("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü—Ä–∏ —Ç–∞–∫–æ–º —Ä–∞—Å–∫–ª–∞–¥–µ –≤ –¥–µ–Ω—å –Ω–∞–¥–æ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è –æ–∫–æ–ª–æ 5 —á–∞—Å–æ–≤ "
                                   "–∏–ª–∏ –≤ –Ω–µ–¥–µ–ª—é 12 —á–∞—Å–æ–≤. –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ - —ç—Ç–æ —Å–≤—è—Ç–æ–µ, –æ—Ç–¥—ã—Ö.")
    else:
        await message.answer("–†–∞—Å—Å—á–∏—Ç–∞–ª –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω. –î–∞–≤–∞–π —Å–≤–µ—Ä–∏–º, —á—Ç–æ —É –º–µ–Ω—è –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å —Ç–≤–æ–∏–º–∏ –æ–∂–∏–¥–∞–Ω–∏—è–º–∏. "
                             "–ö–æ–≥–¥–∞ —Ç—ã –ø–ª–∞–Ω–∏—Ä—É–µ—à—å –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –∑–∞–Ω—è—Ç–∏—è–º?")
        await Course.UserDateStart.set()


@dp.message_handler(state=Course.UserDayPlan)
async def user_plan_set(message: types.Message, state: FSMContext):
    return await message.answer("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")


@dp.message_handler(state=Course.UserDateStart)
async def user_date_start_set(message: types.Message, state: FSMContext):
    if await validate(message.text):
        data = await state.get_data()
        date = datetime.strptime(message.text, '%Y-%m-%d')
        if date < datetime.now():
            return await message.reply("–í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É.")
        months = round(data['course_duration'] / data['user_hours_per_week'] / 3, 0)
        data_finish = date + months
    else:
        return await message.reply("–í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É.")
